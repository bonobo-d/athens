{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56100","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56101","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56104","_","athens.keybindings/block-end?","map__56107","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/dec-cycle","min","max","v","athens.keybindings/inc-cycle","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","uid","state","map__56109","map__56110","cljs.core/deref","top-row?","bottom-row?","results","type","selected-items","G__56113","re-frame.core/subscribe","direction","and__4174__auto__","cljs.core/seq","G__56116","re-frame.core/dispatch","G__56119","G__56120","G__56121","G__56122","G__56123","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","athens.keybindings/slash-options","cur-index","container-el","js/document","next-el","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","athens.util/is-beyond-rect?","athens.util/scroll-if-needed","G__56124","G__56125","G__56126","G__56127","athens.keybindings/handle-tab","map__56128","block-zero?","athens.db/get-block","G__56130","G__56131","athens.keybindings/handle-escape","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","G__56132","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","index","map__56133","vec__56134","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","athens.keybindings/handle-enter","map__56138","map__56139","query","map__56142","title","clojure.string/replace-first","map__56144","first","new-tail","G__56146","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56147","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56149","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56151","close-pair","js/setTimeout","G__56153","G__56154","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56155","G__56156","G__56157","G__56158","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56160","possible-pair","G__56162","p1__56159#","cljs.core/some","G__56163","G__56164","map__56165","query-fn","athens.db/search-in-node-title","athens.db/search-in-block-content","cljs.core/last","athens.db/update-query","athens.keybindings/is-character-key?","map__56167","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56169","map__56170","new-query","goog.events.KeyCodes/SLASH","athens.keybindings/block-key-down","map__56173","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day is-beyond-rect?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(declare slash-options)\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max v]\n  (if (<= v min) max (dec v)))\n\n\n(defn inc-cycle\n  [min max v]\n  (if (>= v max) min (inc v)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index (partial dec-cycle 0 (max-idx slash-options)))\n                                            (let [cur-index (:search/index @state)\n                                                  container-el (. js/document getElementById \"slash-menu-container\")\n                                                  next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                              (when (is-beyond-rect? next-el (.. container-el -parentNode))\n                                                (.. next-el (scrollIntoView false {:behavior \"auto\"})))))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index (partial inc-cycle 0 (max-idx slash-options)))\n                                              (let [cur-index (:search/index @state)\n                                                    container-el (. js/document getElementById \"slash-menu-container\")\n                                                    next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                                (when (is-beyond-rect? next-el container-el)\n                                                  (.. next-el (scrollIntoView false {:behavior \"auto\"}))))))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (swap! state update :search/index (partial dec-cycle 0 (max-idx results)))\n                                   (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                     (.getElementById js/document \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (swap! state update :search/index (partial inc-cycle 0 (max-idx results)))\n                                     (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                       (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value target]} (destruct-event e)\n        {:search/keys [query index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type  nil})\n        (set! (. target -selectionStart) (+ 2 start)))\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type nil})\n        (set! (. target -selectionStart) (+ 2 start)))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query type]} @state\n                  query-fn (cond\n                              (= type :page) db/search-in-node-title\n                              (= type :block) db/search-in-block-content)]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (db/update-query state (subs query 0 (dec (count query))) query-fn))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [query type]} @state\n        new-query (str query key)]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (= type :block) (db/update-query state new-query db/search-in-block-content)\n\n      ;; when in-line search dropdown is open\n      (= type :page) (db/update-query state new-query db/search-in-node-title))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}